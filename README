-----BEGIN PGP SIGNED MESSAGE-----

		  GNUPG - The GNU Privacy Guard
		 -------------------------------
			  Version 0.4

    As you can see from the version number, the program may have some
    bugs and some features may not work at all - please report this to
    the mailing list.

    On a Linux box (version 2.x.x, alpha or x86 CPU) it should
    work reliably.  You may create your key on such a machine and
    use it.  Please verify the tar file; there is a PGP and a GNUPG
    signature available. My PGP 2 key is well known and published in
    the "Global Trust Register for 1998", ISBN 0-9532397-0-5.

    I have included my pubring as "g10/pubring.asc", which contains
    the key used to make GNUPG signatures:
    "pub  1024D/57548DCD 1998-07-07 Werner Koch (gnupg sig) <dd9jn@gnu.org>"
    "Key fingerprint = 6BD9 050F D8FC 941B 4341  2DCC 68B7 AB89 5754 8DCD"

    Old version of gnupg are signed with this key:
    "pub  1312G/FF3EAA0B 1998-02-09 Werner Koch <wk@isil.d.shuttle.de>"
    "Key fingerprint = 8489 6CD0 1851 0E33 45DA  CD67 036F 11B8 FF3E AA0B"

    My usual key is now:
    "pub  1024D/621CC013 1998-07-07 Werner Koch <werner.koch@guug.de>"
    "Key fingerprint = ECAF 7590 EB34 43B5 C7CF  3ACB 6C7E E1B8 621C C013"

    You may add it to your GNUPG pubring and use it in the future to
    verify new releases.  Because you verified this README file and
    _checked_that_it_is_really_my PGP2 key 0C9857A5, you can be sure
    that the above fingerprints are correct.

    Please subscribe to g10@net.lut.ac.uk by sending a mail with
    the word "subscribe" in the body to "g10-request@net.lut.ac.uk".
    This mailing is closed (only subscribers can post) to avoid spam.

    See the file COPYING for copyright and warranty information.

    Due to the fact that GNUPG does not use use any patented algorithm,
    it cannot be compatible with old PGP versions, because those use
    IDEA (which is patented worldwide) and RSA (which is patented in
    the United States until Sep 20, 2000).

    GNUPG is in almost all  aspects compatible with other OpenPGP
    implementations.

    The default algorithms are now DSA and ELGamal.  ELGamal for signing
    is still available, but due to the larger size of such signatures it
    is depreciated (Please note that the GNUPG implementation of ElGamal
    signatures is *not* insecure).  Symmetric algorithms are: Blowfish
    and CAST5,	Digest algorithms are MD5, RIPEMD160, SHA1 and TIGER/192.



    Installation
    ------------

    See the file INSTALL.  Here is a quick summary:

    1)	"./configure"

    2) "make"

    3) "make install"

    4) You end up with a binary "gpg" in /usr/local/bin

    5) Optional, but suggested: install the program "gpg" as suid root.



    Key Generation
    --------------

	gpg --gen-key

    This asks some questions and then starts key generation. To create
    good random numbers for prime number generation, it uses a /dev/random
    which will only emit bytes if the kernel can gather enough entropy.
    If you see no progress, you should start some other activities such
    as mouse moves, "find /" or using the keyboard (in another window).
    Because we have no hardware device to generate randomness we have to
    use this method.

    You should make a revocation certificate in case someone gets
    knowledge of your secret key or you forgot your passphrase:

	gpg --gen-revoke your_user_id

    Run this command and store it away; output is always ASCII armored,
    so that you can print it and (hopefully never) re-create it if
    your electronic media fails.

    If you decided to create a DSA key, you should add an ElGamal
    for encryption:

	gpg --add-key user_id_of_your_key

    and follow the displayed instructions (select "ElGamal using v4 packets").


    You can sign a key with this command:

	gpg --sign-key Donald

    This let you sign the key of "Donald" with your default userid.

	gpg --sign-key -u Karl -u Joe Donald

    This let you sign the key of of "Donald" with the userids of "Karl"
    and "Joe".
    All existing signatures are checked; if some are invalid, a menu is
    offered to delete some of them, and then you are asked for every user
    whether you want to sign this key.

    You may remove a signature at any time using the option "--edit-sig",
    which asks for the sigs to remove.	Self-signatures are not removable.




    Sign
    ----

	gpg -s file

    This creates a file file.gpg which is compressed and has a signature
    attached.

	gpg -sa file

    Same as above, but file.gpg is ascii armored.

	gpg -s -o out file

    Creates a signature of file, but writes the output to the file "out".

    If you use the option "--rfc1991", gnupg tries to me more compatible
    to RFC1991 (pgp 2.x).


    Encrypt
    -------

	gpg -e -r heine file

    This encrypts files with the public key of "heine" and writes it
    to "file.gpg"

	echo "hallo" | gpg -ea -r heine | mail heine

    Ditto, but encrypts "hallo\n" and mails it as ascii armored message.


    Sign and Encrypt
    ----------------

	gpg -se -r heine file

    This encrypts files with the public key of "heine" and writes it
    to "file.gpg" after signing it with the default user id.


	gpg -se -r heine -u Suttner file

    Ditto, but sign the file with the user id "Suttner"


    Keyring Management
    ------------------
    To export your complete keyring(s) do this:

	gpg --export

    To export only some user ids do this:

	gpg --export userids

    Use "-a" or "--armor" to create ASCII armored output.

    Importing keys is done with the option, you guessed it, "--import":

	gpg --import [filenames]

    New keys are appended to the default keyring and already existing
    keys are merged.  Keys without a self-signature are ignored.


    How to Specify a UserID
    -----------------------
    There are several ways to specify a userID, here are some examples:

    * Only by the short keyid (prepend a zero if it begins with A..F):

	"234567C4"
	"0F34E556E"
	"01347A56A"
	"0xAB123456

    * By a complete keyid:

	"234AABBCC34567C4"
	"0F323456784E56EAB"
	"01AB3FED1347A5612"
	"0x234AABBCC34567C4"

    * By a fingerprint:

	"1234343434343434C434343434343434"
	"123434343434343C3434343434343734349A3434"
	"0E12343434343434343434EAB3484343434343434"

      The first one is MD5 the others are ripemd160 or sha1.

    * By an exact string (not yet implemented):

	"=Heinrich Heine <heinrichh@uni-duesseldorf.de>"

    * By an email address:

	"<heinrichh@uni-duesseldorf.de>"

      This can be used by a keyserver instead of a substring to
      find this key faster.

    * By the Local ID (from the trustdb):

	"#34"

      This can be used by a MUA to specify an exact key after selecting
      a key from GNUPG (by the use of a special option or an extra utility)


    * Or by the usual substring:

	"Heine"
	"*Heine"

      The '*' indicates substring search explicitly.




    Batch mode
    ----------
    If you use the option "--batch", GNUPG runs in non-interactive mode and
    never prompts for input data.  This does not even allow entering the
    passphrase; until we have a better solution (something like ssh-agent),
    you can use the option "--passhrase-fd n", which works like PGPs
    PGPPASSFD.

    Batch mode also causes GNUPG to terminate as soon as a BAD signature is
    detected.


    Exit status
    -----------
    GNUPG returns with an exit status of 1 if in batch mode and a bad signature
    has been detected or 2 or higher for all other errors.  You should parse
    stderr or the output of the fd specified with --status-fd to get detailed
    information about the errors.


    Esoteric commands
    -----------------

	gpg --list-packets datafile

    Use this to list the contents of a data file. If the file is encrypted
    you are asked for the passphrase, so that GNUPG is able to look at the
    inner structure of a encrypted packet.

	gpgm --list-trustdb

    List the contents of the trustdb in a human readable format

	gpgm --list-trustdb  <usernames>

    List the tree of certificates for the given usernames

	gpgm --list-trust-path	depth  username

    List the possible trust paths for the given username, up to the specified
    depth.  If depth is negative, duplicate introducers are not listed,
    because those would increase the trust probability only minimally.
    (you must use the special option "--" to stop option parsing when
     using a negative number). This option may create new entries in the
    trustdb.

	gpgm --print-mds  filenames

    List all available message digest values for the fiven filenames

    For more options/commands see the file g10/OPTIONS, or use "gpg --help"


    Debug Flags
    -----------
    Use the option "--debug n" to output debug information. This option
    can be used multiple times, all values are ORed; n maybe prefixed with
    0x to use hex-values.

	 value	used for
	 -----	----------------------------------------------
	  1	packet reading/writing
	  2	MPI details
	  4	ciphers and primes (may reveal sensitive data)
	  8	iobuf filter functions
	  16	iobuf stuff
	  32	memory allocation stuff
	  64	caching
	  128	show memory statistics at exit
	  256	trust verification stuff


    Other Notes
    -----------
    This is work in progress, so you may find duplicated code fragments,
    ugly data structures, weird usage of filenames and other things.

    The primary FTP site is "ftp://ftp.guug.de/pub/gcrypt/"
    The primary WWW page is "http://www.d.shuttle.de/isil/crypt/gnupg.html"

    If you like, send your keys to <gnupg-keys@isil.d.shuttle.de>; use
    "gpg --export --armor | mail gnupg-keys@isil.d.shuttle.de" to do this.

    Please direct bug reports to <gnupg-bugs@gnu.org> or better
    post them to the mailing list <g10@net.lut.ac.uk> (this is a closed list,
    please subscribe before posting).

-----BEGIN PGP SIGNATURE-----
Version: GNUPG v0.3.5a (GNU/Linux)
Comment: Get GNUPG from ftp://ftp.guug.de/pub/gcrypt/

iQB1AwUBNgJ6bB0Z9MEMmFelAQEBHgL+JhFVCrTAK2G3NVVVQBHXU5eucNx3tQQE3UucvSBA
YaKfX8dC5QU7wfgv8nFBXMK2mnAcJhJzBT6mZwxpzTZZTh7IS4qu//R9Vgy3A06ZddxKFf2M
YFelmgdpqTL6ntJC
=JZ3m
-----END PGP SIGNATURE-----
