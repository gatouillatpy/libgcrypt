
	     G10 - The GNU Encryption and Signing Tool
	    ------------------------------------------


    THIS IS VERSION IS ONLY A TEST VERSION !  YOU SHOULD NOT
    USE IT FOR OTHER PURPOSES THAN EVALUATING THE CURRENT CODE.

    * The data format may change in the next version!

    * Some features are not yet implemented


    Please subscribe to g10@net.lut.ac.uk by sending a mail with
    the word "subscribe" in the body to "g10-request@net.lut.ac.uk".

    See the file COPYING for copyright and warranty information.

    Due to the fact that G10 does not use use any patented algorithm,
    it cannot be compatible to old PGP versions, because those use
    IDEA (which is worldwide patented) and RSA (which is patented in
    the United States until Sep 20, 2000).  I'm sorry about this, but
    this is the world we have created (e.g. by using proprietary software).


    Because the OpenPGP standard is still a draft, G10 is not yet
    compatible to it (or PGP 5) - but it will.	The data structures
    used are compatible with PGP 2.x, so it can parse an list such files
    and PGP should be able to parse data created by G10 and complain
    about unsupported algorithms.

    The default algorithms used by G10 are ElGamal for public-key
    encryption and signing; Blowfish with a 160 bit key for protecting
    the secret-key components, conventional and session encryption;
    RIPE MD-160 to create message digest.  DSA, SHA-1 and CAST are
    also implemented, but not used on default.	I decided not
    to use DSA as default signing algorithm, because it allows only for
    1024 bit keys and this may be not enough in a couple of years.



    Installation
    ------------

    1)	"./configure"

       to enable the integrated malloc debugging stuff, use:

	"./configure --enable-m-debug"

    2) "make"

    3) "make install"

    4) You end up with a binary "g10" in /usr/local/bin

    5) create a directory ".g10" under your hoem directory ("mkdir ~/.g10")



    Key Generation
    --------------

	g10 --gen-key

    This asks some questions and then starts key generation. To create
    good random numbers for prime number generation, it uses a /dev/random
    which will emit only bytes if the kernel can gather enough entropy.
    If you see no progress, you should start some other activities such
    as mouse moves, "find /" or using the keyboard (on another window).
    Because we have no hardware device to generate random we have to use
    this method.

    Key generation shows progress by printing different characters to
    stderr:
	     "."  Miller-Rabin test failed.
	     "+"  Miller-Rabin test succeeded.
	     "!"  Reloading the pool with fresh prime numbers
	     "^"  Checking a new value for the generator
	     "~"  Issued during generator checks
	     "<"  Size of one factor decreased
	     ">"  Size of one factor increased

    The prime number for ElGamal is generated this way:

    1) Make a prime number q of 160, 200, 240 bits (depending on the keysize).
    2) Select the length of the other prime factors to be at least the size
       of q and calculate the number of prime factors needed
    3) Make a pool of prime number, each of the length determined in step 2
    4) Get a new permutation out of the pool or continue with step 3
       if we have tested all permutations.
    5) Calculate a candidate prime p = 2 * q * p[1] * ... * p[n] + 1
    6) Check that this prime has the correct length (this may change q if
       it seems not to be possible to make a prime of the desired length)
    7) Check whether this is a prime using trial divisions and the
       Miller-Rabin test.
    8) Continue with step 4 if we did not find a prime in step 7.
    9) Find a generator for that prime.


    You can sign a key with this command:

	g10 --sign-key Donald

    This let you sign the key of "Donald" with your default userid.

	g10 --sign-key -u Karl -u Joe Donald

    This let you sign the key of of "Donald" with the userids of "Karl"
    and "Joe".
    All existing signatures are checked, if some are invalid, a menu is
    offered to delete some of them, and the you are asked for every user
    wether you want to sign this key.

    You may remove a signature at any time using the option "--edit-sig",
    which asks for the sigs to remove.


    Sign
    ----

	g10 -s file

    This creates a file file.g10 which is compressed and has a signature
    attached.

	g10 -sa file

    Same as above, but file.g10 is ascii armored.

	g10 -s -o out file

    Creates a signature of file, but writes the output to the file "out".


    Encrypt
    -------

	g10 -e -r heine file

    This encrypts files with the public key of "heine" and writes it
    to "file.g10"

	echo "hallo" | g10 -ea -r heine | mail heine

    Ditto, but encrypts "hallo\n" and mails it as ascii armored message.


    Sign and Encrypt
    ----------------

	g10 -se -r heine file

    This encrypts files with the public key of "heine" and writes it
    to "file.g10" after signing it with the default user id.


	g10 -se -r heine -u Suttner file

    Ditto, but sign the file with the user id "Suttner"


    Batch mode
    ----------
    If you use the option "--batch", G10 runs in non-interactive mode and
    never prompts for input data.  This even does not allow to enter
    passphrase; until we have a better solution (something like ssh-agent),
    you can use the option "--passhrase-fd n", which works like PGPs
    PGPPASSFD.

    Batch mode also causes G10 to terminate as soon as a BAD signature is
    detected.


    Exit status
    -----------
    G10 returns with an exit status of 1 if in batch mode and a bad signature
    has been detected or 2 or higher for all other errors.  You should parse
    stderr to get detailed informations about the errors.


    Esoteric commands
    -----------------

	g10 --list-packets datafile

    Use this to list the contents of a data file. If the file is encrypted
    you are asked for the passphrase, so that G10 is able to look at the
    inner structure of a encrypted packet.

	--quick-random

    Do not use the stroing random generator but a faster one.  This can be
    used to generate keys for tests; those are marked as insecure.

	--list-trustdb

    List the contents of the trustdb in a human readable format

	--list-trustdb	<usernames>

    List the tree of certificates for the given usernames

	--list-trust-path  depth  username

    List the possible trust paths for the given username, up to the specified
    depth.  If depth is negative, duplicate introducers are not listed,
    because those would increase the trust probabilty only minimal.
    (you must use the special option "--" to stop option parsing when
     using a negative number). This option may create new entries in the
    trustdb.

	--print-mds  filenames

    List all available message digest values for the fiven filenames

	--gen-prime n

    Generate and print a simple prime number of size n

	--gen-prime n q

    Generate a prime number suitable for ElGamal signatures of size n with
    a q as largest primefactor of n-1.

	--gen-prime n q 1

    Ditto, but calculate a generator too.


    For more options/commands see the file g10/OPTIONS.


    Debug Flags
    -----------
    Use the option "--debug n" to output debug informations. This option
    can be used multiple times, all values are ORed; n maybe prefixed with
    0x to use hex-values.

	 value	used for
	 -----	----------------------------------------------
	  1	packet reading/writing
	  2	MPI details
	  4	ciphers and primes (may reveal sensitive data)
	  8	iobuf filter functions
	  16	iobuf stuff
	  32	memory allocation stuff
	  64	caching
	  128	show memory statistics at exit
	  256	trust verification stuff


    Other Notes
    -----------
    This is work in progress, so you may find duplicated code fragments,
    ugly data structures, weird usage of filenames and other thinks.
    I will run "indent" over the source when making a real distribution,
    but for now I stick to my own formatting rules.

    The primary FTP site is "ftp://ftp.guug.de/pub/gcrypt/"
    The primary WWW page is "http://www.d.shuttle.de/isil/g10.html"

    Please direct bug reports to <g10-bugs@isil.d.shuttle.de> or better
    post them to the mailing list <g10@net.lut.ac.uk>.


